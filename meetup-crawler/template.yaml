AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

# TODO should use parameters for SubnetIds, SecurityGroup, Secret 

Description: >
  meetup-crawler

  Crawls Meetup.com API to retrieve groups data and event details

Parameters: 
  Env:
    Default: "dev"
    Description: "The name of the environment"
    Type: String
    AllowedValues: 
      - "prod"
      - "dev"

  AlarmEmail: 
    Default: "<<ALERT_EMAIL>>"
    Description: "Email address to notify of operational issues"
    Type: "String"
    
  SubnetIds:
    Default: "<<SUBNET_IDS>>"
    Description: "Private subnets with route to NAT Gateway to deploy the Lambda function"
    Type: "List<AWS::EC2::Subnet::Id>"
    
  SecurityGroupId:
    Default: "<<SECURITY_GROUP>>"
    Description: "Security Group that has permission to access the database"
    Type: "List<AWS::EC2::SecurityGroup::Id>"    
    
  DatabaseSecretArn:
    Default: "<<SECRET_ARN>>"
    Description: "Arn of the secret having database connection info"
    Type: "String"  

  CodeLogLevel:
    Default: "DEBUG"
    Description: "Log Level, see https://docs.python.org/3/library/logging.html#levels"
    Type: "String"  

Globals:
  Function:
    Runtime: python3.8
    CodeUri: src/
    Timeout: 120
    
    Environment:
      Variables:
        PYTHON_LOGLEVEL: !Ref CodeLogLevel
        DB_SECRET_ARN: !Ref DatabaseSecretArn
        DYNAMODB_TABLE_NAME: !Ref MeetupGroupDynamoDBTable
        SQS_QUEUE_NAME: !Ref MeetupCodeSqsQueue
          
Resources:
  MeetupCrawlerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: meetupcrawler.app.lambda_handler
     
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref DatabaseSecretArn
        - DynamoDBReadPolicy:
            TableName: !Ref MeetupGroupDynamoDBTable
        - DynamoDBWritePolicy:
            TableName: !Ref MeetupGroupDynamoDBTable 
            
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MeetupCodeSqsQueue.Arn
            BatchSize: 10

      VpcConfig:
        # private subnet from the RDS VPC (with NAT Gateway because we need to call AWS and external APIs)
        # https://stackoverflow.com/questions/52992085/why-cant-an-aws-lambda-function-inside-a-public-subnet-in-a-vpc-connect-to-the
        SubnetIds: !Ref SubnetIds
 
        # security group authorized to make inbound connections to RDS cluster
        SecurityGroupIds: !Ref SecurityGroupId  
  
  MeetupCrawlerSchedulerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: meetupscheduler.app.lambda_handler

      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt MeetupCodeSqsQueue.QueueName      
        - DynamoDBReadPolicy:
            TableName: !Ref MeetupGroupDynamoDBTable
        - DynamoDBWritePolicy:
            TableName: !Ref MeetupGroupDynamoDBTable 
            
      Events:
        MyScheduleEvent:
          Type: Schedule
          Properties:
            Description: "Meetup Crawler Scheduler"
            Enabled: true
            Schedule: rate(1 hour)
          
  MeetupCodeSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      # https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html
      # Visibility Timeout = 6 x Lambda function timeout as per doc
      VisibilityTimeout: 180
      
      # Messages that can not be processed will be delivered here for manual analysis
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt ErrorMsgSqsQueue.Arn
        maxReceiveCount: 3
        
  ErrorMsgSqsQueue:
    Type: AWS::SQS::Queue
    
  AlarmTopic: 
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - 
          Endpoint: 
            !Ref AlarmEmail
          Protocol: "email"
            
  QueueDepthAlarm: 
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription: "Alarm if queue depth increases to more than 10 messages"
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions: 
        - 
          Name: "MeetupDeadLetterQueue"
          Value: 
            Fn::GetAtt: 
              - "ErrorMsgSqsQueue"
              - "QueueName"
      Statistic: "Sum"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "10"
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions: 
        - 
          !Ref AlarmTopic
      InsufficientDataActions: 
        - 
          !Ref AlarmTopic   
            
  MeetupGroupDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - 
          AttributeName: "pk"
          AttributeType: "S"
        - 
          AttributeName: "sk"
          AttributeType: "S"

      KeySchema: 
        - 
          AttributeName: "pk"
          KeyType: "HASH"
        - 
          AttributeName: "sk"
          KeyType: "RANGE"

Outputs:
  DynamoDBTableName:
    Description: The name of the DynamoDB table
    Value: !Ref MeetupGroupDynamoDBTable
    Export:
      Name: !Sub DYNAMODB-TABLE-NAME-${Env}

  SQSQueueName:
    Description: The name of the SQS Queue
    Value: !Ref MeetupCodeSqsQueue
    Export:
      Name: !Sub SQS-QUEUE-NAME-${Env}